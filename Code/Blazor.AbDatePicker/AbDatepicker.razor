@using Microsoft.JSInterop
@inject IJSRuntime js

<input class="form-control" id="@_elementId" type="text" placeholder="@Options.InputFormats" />

@code {
    readonly string _elementId = $"date-{Guid.NewGuid():D}";

    [Parameter]
    public DateTime? Value { get; set; }
    [Parameter]
    public AdDatepickerOptions Options { get; set; } = new AdDatepickerOptions();
    [Parameter]
    public EventCallback<DateTime?> ValueChanged { get; set; }

    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var initDate = Value?.ToString("O");
            await js.InvokeAsync<object>(
                "abDatepickerBlazor.init",
                _elementId, Options, initDate, DotNetObjectReference.Create(this));
            _initialized = true;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_initialized)
        {
            Console.WriteLine("OnParametersSetAsync");
            await js.InvokeAsync<object>(
                "abDatepickerBlazor.change",
                _elementId, Options);
        }

        await base.OnParametersSetAsync();
    }

    [JSInvokable]
    public async Task OnChangeAsync(DateTime? oldVal, DateTime? newVal)
    {
        if (oldVal != newVal)
        {
            Value = newVal;
            await ValueChanged.InvokeAsync(Value);
        }
    }
}